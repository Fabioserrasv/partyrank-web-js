// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  animeList       String
  imageUrl        String?
  admin           Boolean
  acceptingInvite Boolean          @default(true)
  scores          Score[]
  SongSetsCreated SongSet[]
  SongSetsOn      UsersOnSongSet[]
  createdAt       DateTime?
  updatedAt       DateTime?
  deletedAt       DateTime?
}

enum SongSetStatus {
  RECRUITING
  ON_GOING
  PROCESSING
  FINISHED
  PAUSED
}

enum SongSetInviteType {
  PRIVATE
  PUBLIC
}

enum SongSetScoreSystemType {
  RANKING
  SCORING
  SCORING_AVERAGE
}

model SongSet {
  id          Int                    @id @default(autoincrement())
  name        String
  songs       Song[]
  user        User                   @relation(fields: [userId], references: [id])
  userId      Int
  status      SongSetStatus          @default(ON_GOING)
  type        SongSetInviteType      @default(PRIVATE)
  scoreSystem SongSetScoreSystemType @default(SCORING_AVERAGE)
  users       UsersOnSongSet[]
  maxUsers    Int?                   @default(0)
  createdAt   DateTime?
  updatedAt   DateTime?
  deletedAt   DateTime?
}

model UsersOnSongSet {
  songSet   SongSet @relation(fields: [songSetId], references: [id])
  songSetId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  accepted  Boolean @default(false)

  @@id([songSetId, userId])
}

enum SongType {
  OPENING
  ENDING
  INSERT_SONG
}

model Song {
  id        Int       @id @default(autoincrement())
  songSet   SongSet   @relation(fields: [songSetId], references: [id])
  songSetId Int
  anime     String
  artist    String
  name      String
  link      String
  type      SongType  @default(OPENING)
  scores    Score[]
  createdAt DateTime?
  updatedAt DateTime?
  deletedAt DateTime?
}

model Score {
  id             Int       @id @default(autoincrement())
  song           Song      @relation(fields: [songId], references: [id])
  songId         Int
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  value          Float
  videoTimeStamp Int
  valid          Int
  createdAt      DateTime?
  updatedAt      DateTime?
  deletedAt      DateTime?
}
